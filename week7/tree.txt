A tree is an ADT that stores elements hierachically.
Tree T is a set of nodes storing elements such that the nodes have a parent-child relationship, which satisfying the following:
1. If non-empty, it has a special node called the root.
2. Each node V of T different from the root has a unique parent node W; every node with parent W is a child of W.
3. Nodes without children are called leaves; nodes with children are called internals.

Class Tree:
"""Abstract base calss representing a tree strucuture"""
    Class Position:
        """An abstraction representing location of single element in the tree."""
        def element(self):
            raise error
        def __eq__(self, other):
            raise error
        def __ne__(self, other):
            return not(self == other )
    def root(self):
        raise error
    def parent(self, p):
        raise error
    def num_children(self, p):
        raise error
    def children(self, p):
        raise error
    def __len__(self):
        raise error
    def is_root(self, p):
        return self.root() == p
    def is_leaf(self, p):
        return self.num_children(p)==0
    def is_empty(self):
        return len(self) == 0

Let p be a node in tree T. The depth of p is the number of ancesters of p excluding itself.
def depth(self, p):
    """return number of levels seperating p from the root"""
    if self.is_root(p):
        return 0
    else:
        return 1 + self.depth(self.parent(p))

height of position p in T is also defined recursively.
    if p is a leaf, height 0
    otherwise, the height of p is one more than the maximum height of p's children.
def _height(self):
    # return height of tree, time complexity O(n^2)
    return max(self.depth(p)) for p in self.positions() if self.is_leaf(p) 

def _height2(self, p):
    # return height of subtree located at position p, time complexity O(n)
    if self.is_leaf(p):
        return 0
    else:
        return 1 + max(self._height2(c) for c in self.children(p))

Binary trees
an ordered tree with properties:
1. every node has at most 2 children
2. each child node is labeled as a left or right child
3. the left precedes the right child in order of children

((((3+1)*3)/((9-5)+2))-((3*7(7-4))+6))
Pasrsing...

inorder - infix, preorder - prefix, postorder - postfix
Class BinaryTree(Tree):
    """abstract base class representing binary tree standfree"""
    def left(self, p):
        raise error
    def right(self, p):
        raise error
    def sibling(self, p):
        parent = self.parent(p)
        if parent is None:
            return None
        else:
            if p == self.left(parent):
                return self.right(parent)
            else:
                return self.left(parent)
    def children(self, p):
        if self.left(p) is not None:
            yield self.left(p)
        if self.right(p) is not None:
            yield self.right(p)

left T be a nonempty binary tree and lef n, n_E, n_I, h as number of nodes, leaves, internal nodes, height
1. h+1 <= n <= 2^(h+1)-1
2. 1 <= n_E <=2^h
3. h <= n_I <= 2^(h-1)
4. log(n+1)-1 <= h <= n-1

class LinkedBinaryTree(BinaryTree):
    """linked representation of a binary tree structure"""
    
    class _Node: # lightweight nonpublic class for storing a node
        __slots__ = '_element', '_parent', '_left', '_right'

        def __init__(self, element, parent = None, left = None, right = None):
            self._element = element
            self._parent  = parent 
            self._left = left
            self._right = right

        class Position(BinaryTree.Position):
            """an abstraction representing the location of a single element"""

            def __init__(self, container, node):
                self._container = container
                self._node = node

            def element(self):
                """returns the element stored at this position"""
                return self._node._element

            def __eq__(self, other):
                """return true if other is a position representing the same location"""
                return type(other) is type(self) and other._node is self._node

            def _validate(self, p):
                """return associated node, if position is valid"""
                if not isinstance(p, self.Position):
                    raise TypeError('p must be proper position type')
                if p._container is not self:
                    raise ValueError('p does not belong to this container')
                if p._node._parent is p._node: # convention for deprecated nodes
                    raise ValueError('p is no longer valide')

                return p._node
				
            def _make_position(self, node):
                """return position instance for a given node or None if no node"""
                return self.Position(self, node) if node is not None else None
                
            # -------- binary tree constructor --------
            def __init(self):
                """creates an initially empty bianry tree"""
                self._root = None
                self._size = 0
                
            # -------- public accessors --------
            def __len__(self):
                return self._size
                
            def root(self):
                return self._make_position(self._root)
                
            def parent(self, p):
                """return the position of p's parent"""
                node = self._validate(p)
                return self._make_position(node._parent)
                
            def left(self,p):
                """return the psotion of p's left child"""
                node = self._validate(p)
                return self._make_position(node._left)
                
            def right(self,p):
                node = self._validate(p)
                return self._make_position(node._right)
                
            def num_children(self, p):
                """return the number of children of position p"""
                node = self._validate(p)
                count = 0
                if node._left is not None:
                    count += 1
                if node._right is not None:
                    count += 1
                return count
                
            def _add_root(self, e):
                """places element e at the root of an empty tree and returns a new position
                   Raise ValueError if tree is nonempty
                """
                if self._root is not None: raise ValueError('Root exists')
                self._size = 1
                self._root = self._Node(e)
                return self._make_position(self,_root)
                
             def _add_left(self, p, e):
                 """create a new left child for position p, storing element e"""
                 node = self._validate(p)
                 if node._left is not None: raise ValueError('left childe exists')
                 self._size += 1
                 node._left = self._Node(e, node)
                 return self.make_position(node._left)
                 
             def _add_right(self, p, e):
                 """create a new right child for position p, storing element e"""
                 node = self._validate(p)
                 if node._right is not None: raise ValueError('right childe exists')
                 self._size += 1
                 node._right = self._Node(e, node)
                 return self.make_position(node._right)
                 
