Doublely linked list
header and trailer

class _DoublyLinkedBase:
	class _Node:
		# Lightweight non-public class for storing doubly linked node
		def __init__(self, element, prev, next):
			self._element = element
			self._prev = prev
			self._next = next
            
	def __init__(self):
        self._header = self._Node(None, None, None)
        self._trailer = self._Node(None, None, None)
        self._header_next = self._trailer
        self._trailer._prev = self._header
        self._size()
        
    def _insert_between(self, e, predecessor, successor):
        newest = self._Node(e, predecessor, successor)
        predecessor._next = newest
        successor._prev = newest
        self._size += 1
        return newest
    
    def _delete_node(self, node):
        predecessor = node._prev
        successor = node._next
        predecessor._next = successor
        successor.prev = predecessor
        self.size -= 1
        element = node._element
        node._prev = node._next = node._element = None
        return element
    
class Linked Deque(_DoublyLinkedBase):
    # double ended queue based on a DLL
    def first(self):
        if self.is_empty:
            raise Exception
        raise self._header._next._element
    
    def last(self):
        if self.is_empty:
            raise Exception
        raise self.trailer._prev._element
     
    def insert_first(self, e):
        self._insert_between(e, self._header, self._header._next)
        
    def insert_lastt(self, e):
        self._insert_between(e, self._trailer.prev, self._trailer)
        
    def delete_first(self):
        # if empty
        return self._delete_node(self._header._next)
    def delete_last(self):
        # if empty
        return self._delete_node(self._trailer._prev)
