Stack
Last-in, first out (LIFO)
Formally, a stack is an ADT
s.push(e)	# add e to top of stack
s.pop()		# remove and return top element
s.top()		# return reference to top element
s.is_empty()	#
len(s)

Operation	Return Value	Stack content
s.push(5)	-		[5]
s.push(3)	-		[5, 3]
len(s)		2		[5, 3]
s.pop()		3		[5]
s.is_empty()	False		[5]
s.pop()		5		[]
...

Operation 	Running time
s.push(e)	O(1)*
s.pop()		O(1)*
s.top()		O(1)
s.is_empty()	O(1)
len(s)		O(1)

Matching Parentheses using a stack
1. init empty stack
2. read characters until end
3. if current char == '(' (opening parentheses), push char to stack
4. elif current char == ')' (closinging parentheses) and stack is empty, raise ERROR
5. 	else pop stack, if popped symbol does not match char, raise ERROR
6. if at EOF and stack is not empty, raise ERROR