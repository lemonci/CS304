QuickSort

- worst case O(n^2): unbalanced partition
- average sort of O(n logn)

Divide: Partition the array A[g..r] into two possibily empty subarrays A[p..q-1], A[q+1..r] such that each element of A[p..q-1] is less than or equal to A[q] , which is in turn <= A[q+1..r] 
Conquer: sort two subarrays A[p..q-1], A[q+1..r] by recursive calls to quicksort
Combine: not needed

def quicksort(A, p, r):
	if p < r:
		q = partition(A, p, r)
		quicksort(A, p, q)
		quicksort(A, q+1, r)

def partition(A, p, r):
	i = random(p, r)	# Randomized quicksort
	exchange A[r], A[i]
	x = A[r]
	i = p - 1
	for j in range(p, r):
		if A[j] <= x:
			i += 1
			temp = A[i]
			A[i] = A[j]
	temp = A[r]
	A[r] = A[i+1]
	A[i+1] = temp
	
	return i